#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TMA3.part4.linq_to_sql
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="database")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAuth(Auth instance);
    partial void UpdateAuth(Auth instance);
    partial void DeleteAuth(Auth instance);
    partial void InsertComputerPart(ComputerPart instance);
    partial void UpdateComputerPart(ComputerPart instance);
    partial void DeleteComputerPart(ComputerPart instance);
    partial void InsertComputer(Computer instance);
    partial void UpdateComputer(Computer instance);
    partial void DeleteComputer(Computer instance);
    partial void InsertOrderList(OrderList instance);
    partial void UpdateOrderList(OrderList instance);
    partial void DeleteOrderList(OrderList instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertPart(Part instance);
    partial void UpdatePart(Part instance);
    partial void DeletePart(Part instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["databaseConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Auth> Auths
		{
			get
			{
				return this.GetTable<Auth>();
			}
		}
		
		public System.Data.Linq.Table<ComputerPart> ComputerParts
		{
			get
			{
				return this.GetTable<ComputerPart>();
			}
		}
		
		public System.Data.Linq.Table<Computer> Computers
		{
			get
			{
				return this.GetTable<Computer>();
			}
		}
		
		public System.Data.Linq.Table<OrderList> OrderLists
		{
			get
			{
				return this.GetTable<OrderList>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<Part> Parts
		{
			get
			{
				return this.GetTable<Part>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Auth")]
	public partial class Auth : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Username;
		
		private string _Password;
		
		private string _Email;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Auth()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Auth_Order", Storage="_Orders", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Auth = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Auth = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ComputerParts")]
	public partial class ComputerPart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ComputerID;
		
		private int _PartID;
		
		private System.Nullable<bool> _Standard;
		
		private EntityRef<Computer> _Computer;
		
		private EntityRef<Part> _Part;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnComputerIDChanging(int value);
    partial void OnComputerIDChanged();
    partial void OnPartIDChanging(int value);
    partial void OnPartIDChanged();
    partial void OnStandardChanging(System.Nullable<bool> value);
    partial void OnStandardChanged();
    #endregion
		
		public ComputerPart()
		{
			this._Computer = default(EntityRef<Computer>);
			this._Part = default(EntityRef<Part>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComputerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ComputerID
		{
			get
			{
				return this._ComputerID;
			}
			set
			{
				if ((this._ComputerID != value))
				{
					if (this._Computer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnComputerIDChanging(value);
					this.SendPropertyChanging();
					this._ComputerID = value;
					this.SendPropertyChanged("ComputerID");
					this.OnComputerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PartID
		{
			get
			{
				return this._PartID;
			}
			set
			{
				if ((this._PartID != value))
				{
					if (this._Part.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartIDChanging(value);
					this.SendPropertyChanging();
					this._PartID = value;
					this.SendPropertyChanged("PartID");
					this.OnPartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Standard", DbType="Bit")]
		public System.Nullable<bool> Standard
		{
			get
			{
				return this._Standard;
			}
			set
			{
				if ((this._Standard != value))
				{
					this.OnStandardChanging(value);
					this.SendPropertyChanging();
					this._Standard = value;
					this.SendPropertyChanged("Standard");
					this.OnStandardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Computer_ComputerPart", Storage="_Computer", ThisKey="ComputerID", OtherKey="ComputerID", IsForeignKey=true)]
		public Computer Computer
		{
			get
			{
				return this._Computer.Entity;
			}
			set
			{
				Computer previousValue = this._Computer.Entity;
				if (((previousValue != value) 
							|| (this._Computer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Computer.Entity = null;
						previousValue.ComputerParts.Remove(this);
					}
					this._Computer.Entity = value;
					if ((value != null))
					{
						value.ComputerParts.Add(this);
						this._ComputerID = value.ComputerID;
					}
					else
					{
						this._ComputerID = default(int);
					}
					this.SendPropertyChanged("Computer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_ComputerPart", Storage="_Part", ThisKey="PartID", OtherKey="PartID", IsForeignKey=true)]
		public Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.ComputerParts.Remove(this);
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.ComputerParts.Add(this);
						this._PartID = value.PartID;
					}
					else
					{
						this._PartID = default(int);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Computers")]
	public partial class Computer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ComputerID;
		
		private string _Name;
		
		private string _Brand;
		
		private string _ImagePath;
		
		private string _About;
		
		private System.Nullable<double> _AddCost;
		
		private string _Type;
		
		private string _Label;
		
		private EntitySet<ComputerPart> _ComputerParts;
		
		private EntitySet<OrderList> _OrderLists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnComputerIDChanging(int value);
    partial void OnComputerIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBrandChanging(string value);
    partial void OnBrandChanged();
    partial void OnImagePathChanging(string value);
    partial void OnImagePathChanged();
    partial void OnAboutChanging(string value);
    partial void OnAboutChanged();
    partial void OnAddCostChanging(System.Nullable<double> value);
    partial void OnAddCostChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnLabelChanging(string value);
    partial void OnLabelChanged();
    #endregion
		
		public Computer()
		{
			this._ComputerParts = new EntitySet<ComputerPart>(new Action<ComputerPart>(this.attach_ComputerParts), new Action<ComputerPart>(this.detach_ComputerParts));
			this._OrderLists = new EntitySet<OrderList>(new Action<OrderList>(this.attach_OrderLists), new Action<OrderList>(this.detach_OrderLists));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComputerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ComputerID
		{
			get
			{
				return this._ComputerID;
			}
			set
			{
				if ((this._ComputerID != value))
				{
					this.OnComputerIDChanging(value);
					this.SendPropertyChanging();
					this._ComputerID = value;
					this.SendPropertyChanged("ComputerID");
					this.OnComputerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Brand", DbType="VarChar(MAX)")]
		public string Brand
		{
			get
			{
				return this._Brand;
			}
			set
			{
				if ((this._Brand != value))
				{
					this.OnBrandChanging(value);
					this.SendPropertyChanging();
					this._Brand = value;
					this.SendPropertyChanged("Brand");
					this.OnBrandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath", DbType="VarChar(MAX)")]
		public string ImagePath
		{
			get
			{
				return this._ImagePath;
			}
			set
			{
				if ((this._ImagePath != value))
				{
					this.OnImagePathChanging(value);
					this.SendPropertyChanging();
					this._ImagePath = value;
					this.SendPropertyChanged("ImagePath");
					this.OnImagePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_About", DbType="VarChar(MAX)")]
		public string About
		{
			get
			{
				return this._About;
			}
			set
			{
				if ((this._About != value))
				{
					this.OnAboutChanging(value);
					this.SendPropertyChanging();
					this._About = value;
					this.SendPropertyChanged("About");
					this.OnAboutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddCost", DbType="Float")]
		public System.Nullable<double> AddCost
		{
			get
			{
				return this._AddCost;
			}
			set
			{
				if ((this._AddCost != value))
				{
					this.OnAddCostChanging(value);
					this.SendPropertyChanging();
					this._AddCost = value;
					this.SendPropertyChanged("AddCost");
					this.OnAddCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(MAX)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Label", DbType="VarChar(MAX)")]
		public string Label
		{
			get
			{
				return this._Label;
			}
			set
			{
				if ((this._Label != value))
				{
					this.OnLabelChanging(value);
					this.SendPropertyChanging();
					this._Label = value;
					this.SendPropertyChanged("Label");
					this.OnLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Computer_ComputerPart", Storage="_ComputerParts", ThisKey="ComputerID", OtherKey="ComputerID")]
		public EntitySet<ComputerPart> ComputerParts
		{
			get
			{
				return this._ComputerParts;
			}
			set
			{
				this._ComputerParts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Computer_OrderList", Storage="_OrderLists", ThisKey="ComputerID", OtherKey="ComputerID")]
		public EntitySet<OrderList> OrderLists
		{
			get
			{
				return this._OrderLists;
			}
			set
			{
				this._OrderLists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ComputerParts(ComputerPart entity)
		{
			this.SendPropertyChanging();
			entity.Computer = this;
		}
		
		private void detach_ComputerParts(ComputerPart entity)
		{
			this.SendPropertyChanging();
			entity.Computer = null;
		}
		
		private void attach_OrderLists(OrderList entity)
		{
			this.SendPropertyChanging();
			entity.Computer = this;
		}
		
		private void detach_OrderLists(OrderList entity)
		{
			this.SendPropertyChanging();
			entity.Computer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderList")]
	public partial class OrderList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderID;
		
		private int _ComputerID;
		
		private int _CpuID;
		
		private int _RamID;
		
		private int _HdID;
		
		private int _DisplayID;
		
		private int _OsID;
		
		private double _Price;
		
		private EntityRef<Computer> _Computer;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<Part> _Part;
		
		private EntityRef<Part> _Part1;
		
		private EntityRef<Part> _Part2;
		
		private EntityRef<Part> _Part3;
		
		private EntityRef<Part> _Part4;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnComputerIDChanging(int value);
    partial void OnComputerIDChanged();
    partial void OnCpuIDChanging(int value);
    partial void OnCpuIDChanged();
    partial void OnRamIDChanging(int value);
    partial void OnRamIDChanged();
    partial void OnHdIDChanging(int value);
    partial void OnHdIDChanged();
    partial void OnDisplayIDChanging(int value);
    partial void OnDisplayIDChanged();
    partial void OnOsIDChanging(int value);
    partial void OnOsIDChanged();
    partial void OnPriceChanging(double value);
    partial void OnPriceChanged();
    #endregion
		
		public OrderList()
		{
			this._Computer = default(EntityRef<Computer>);
			this._Order = default(EntityRef<Order>);
			this._Part = default(EntityRef<Part>);
			this._Part1 = default(EntityRef<Part>);
			this._Part2 = default(EntityRef<Part>);
			this._Part3 = default(EntityRef<Part>);
			this._Part4 = default(EntityRef<Part>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComputerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ComputerID
		{
			get
			{
				return this._ComputerID;
			}
			set
			{
				if ((this._ComputerID != value))
				{
					if (this._Computer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnComputerIDChanging(value);
					this.SendPropertyChanging();
					this._ComputerID = value;
					this.SendPropertyChanged("ComputerID");
					this.OnComputerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CpuID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CpuID
		{
			get
			{
				return this._CpuID;
			}
			set
			{
				if ((this._CpuID != value))
				{
					if (this._Part.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCpuIDChanging(value);
					this.SendPropertyChanging();
					this._CpuID = value;
					this.SendPropertyChanged("CpuID");
					this.OnCpuIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RamID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RamID
		{
			get
			{
				return this._RamID;
			}
			set
			{
				if ((this._RamID != value))
				{
					if (this._Part4.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRamIDChanging(value);
					this.SendPropertyChanging();
					this._RamID = value;
					this.SendPropertyChanged("RamID");
					this.OnRamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HdID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int HdID
		{
			get
			{
				return this._HdID;
			}
			set
			{
				if ((this._HdID != value))
				{
					if (this._Part2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHdIDChanging(value);
					this.SendPropertyChanging();
					this._HdID = value;
					this.SendPropertyChanged("HdID");
					this.OnHdIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DisplayID
		{
			get
			{
				return this._DisplayID;
			}
			set
			{
				if ((this._DisplayID != value))
				{
					if (this._Part1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDisplayIDChanging(value);
					this.SendPropertyChanging();
					this._DisplayID = value;
					this.SendPropertyChanged("DisplayID");
					this.OnDisplayIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OsID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OsID
		{
			get
			{
				return this._OsID;
			}
			set
			{
				if ((this._OsID != value))
				{
					if (this._Part3.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOsIDChanging(value);
					this.SendPropertyChanging();
					this._OsID = value;
					this.SendPropertyChanged("OsID");
					this.OnOsIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float NOT NULL")]
		public double Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Computer_OrderList", Storage="_Computer", ThisKey="ComputerID", OtherKey="ComputerID", IsForeignKey=true)]
		public Computer Computer
		{
			get
			{
				return this._Computer.Entity;
			}
			set
			{
				Computer previousValue = this._Computer.Entity;
				if (((previousValue != value) 
							|| (this._Computer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Computer.Entity = null;
						previousValue.OrderLists.Remove(this);
					}
					this._Computer.Entity = value;
					if ((value != null))
					{
						value.OrderLists.Add(this);
						this._ComputerID = value.ComputerID;
					}
					else
					{
						this._ComputerID = default(int);
					}
					this.SendPropertyChanged("Computer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderList", Storage="_Order", ThisKey="OrderID", OtherKey="OrderID", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderLists.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderLists.Add(this);
						this._OrderID = value.OrderID;
					}
					else
					{
						this._OrderID = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_OrderList", Storage="_Part", ThisKey="CpuID", OtherKey="PartID", IsForeignKey=true)]
		public Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.OrderLists.Remove(this);
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.OrderLists.Add(this);
						this._CpuID = value.PartID;
					}
					else
					{
						this._CpuID = default(int);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_OrderList1", Storage="_Part1", ThisKey="DisplayID", OtherKey="PartID", IsForeignKey=true)]
		public Part Part1
		{
			get
			{
				return this._Part1.Entity;
			}
			set
			{
				Part previousValue = this._Part1.Entity;
				if (((previousValue != value) 
							|| (this._Part1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part1.Entity = null;
						previousValue.OrderLists1.Remove(this);
					}
					this._Part1.Entity = value;
					if ((value != null))
					{
						value.OrderLists1.Add(this);
						this._DisplayID = value.PartID;
					}
					else
					{
						this._DisplayID = default(int);
					}
					this.SendPropertyChanged("Part1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_OrderList2", Storage="_Part2", ThisKey="HdID", OtherKey="PartID", IsForeignKey=true)]
		public Part Part2
		{
			get
			{
				return this._Part2.Entity;
			}
			set
			{
				Part previousValue = this._Part2.Entity;
				if (((previousValue != value) 
							|| (this._Part2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part2.Entity = null;
						previousValue.OrderLists2.Remove(this);
					}
					this._Part2.Entity = value;
					if ((value != null))
					{
						value.OrderLists2.Add(this);
						this._HdID = value.PartID;
					}
					else
					{
						this._HdID = default(int);
					}
					this.SendPropertyChanged("Part2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_OrderList3", Storage="_Part3", ThisKey="OsID", OtherKey="PartID", IsForeignKey=true)]
		public Part Part3
		{
			get
			{
				return this._Part3.Entity;
			}
			set
			{
				Part previousValue = this._Part3.Entity;
				if (((previousValue != value) 
							|| (this._Part3.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part3.Entity = null;
						previousValue.OrderLists3.Remove(this);
					}
					this._Part3.Entity = value;
					if ((value != null))
					{
						value.OrderLists3.Add(this);
						this._OsID = value.PartID;
					}
					else
					{
						this._OsID = default(int);
					}
					this.SendPropertyChanged("Part3");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_OrderList4", Storage="_Part4", ThisKey="RamID", OtherKey="PartID", IsForeignKey=true)]
		public Part Part4
		{
			get
			{
				return this._Part4.Entity;
			}
			set
			{
				Part previousValue = this._Part4.Entity;
				if (((previousValue != value) 
							|| (this._Part4.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part4.Entity = null;
						previousValue.OrderLists4.Remove(this);
					}
					this._Part4.Entity = value;
					if ((value != null))
					{
						value.OrderLists4.Add(this);
						this._RamID = value.PartID;
					}
					else
					{
						this._RamID = default(int);
					}
					this.SendPropertyChanged("Part4");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Orders")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderID;
		
		private int _UserID;
		
		private System.Nullable<System.DateTime> _Date;
		
		private EntitySet<OrderList> _OrderLists;
		
		private EntityRef<Auth> _Auth;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(int value);
    partial void OnOrderIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    #endregion
		
		public Order()
		{
			this._OrderLists = new EntitySet<OrderList>(new Action<OrderList>(this.attach_OrderLists), new Action<OrderList>(this.detach_OrderLists));
			this._Auth = default(EntityRef<Auth>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._Auth.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderList", Storage="_OrderLists", ThisKey="OrderID", OtherKey="OrderID")]
		public EntitySet<OrderList> OrderLists
		{
			get
			{
				return this._OrderLists;
			}
			set
			{
				this._OrderLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Auth_Order", Storage="_Auth", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public Auth Auth
		{
			get
			{
				return this._Auth.Entity;
			}
			set
			{
				Auth previousValue = this._Auth.Entity;
				if (((previousValue != value) 
							|| (this._Auth.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Auth.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Auth.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("Auth");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderLists(OrderList entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderLists(OrderList entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Parts")]
	public partial class Part : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PartID;
		
		private string _Name;
		
		private System.Nullable<double> _Price;
		
		private string _Brand;
		
		private string _Type;
		
		private EntitySet<ComputerPart> _ComputerParts;
		
		private EntitySet<OrderList> _OrderLists;
		
		private EntitySet<OrderList> _OrderLists1;
		
		private EntitySet<OrderList> _OrderLists2;
		
		private EntitySet<OrderList> _OrderLists3;
		
		private EntitySet<OrderList> _OrderLists4;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPartIDChanging(int value);
    partial void OnPartIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    partial void OnBrandChanging(string value);
    partial void OnBrandChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public Part()
		{
			this._ComputerParts = new EntitySet<ComputerPart>(new Action<ComputerPart>(this.attach_ComputerParts), new Action<ComputerPart>(this.detach_ComputerParts));
			this._OrderLists = new EntitySet<OrderList>(new Action<OrderList>(this.attach_OrderLists), new Action<OrderList>(this.detach_OrderLists));
			this._OrderLists1 = new EntitySet<OrderList>(new Action<OrderList>(this.attach_OrderLists1), new Action<OrderList>(this.detach_OrderLists1));
			this._OrderLists2 = new EntitySet<OrderList>(new Action<OrderList>(this.attach_OrderLists2), new Action<OrderList>(this.detach_OrderLists2));
			this._OrderLists3 = new EntitySet<OrderList>(new Action<OrderList>(this.attach_OrderLists3), new Action<OrderList>(this.detach_OrderLists3));
			this._OrderLists4 = new EntitySet<OrderList>(new Action<OrderList>(this.attach_OrderLists4), new Action<OrderList>(this.detach_OrderLists4));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PartID
		{
			get
			{
				return this._PartID;
			}
			set
			{
				if ((this._PartID != value))
				{
					this.OnPartIDChanging(value);
					this.SendPropertyChanging();
					this._PartID = value;
					this.SendPropertyChanged("PartID");
					this.OnPartIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float")]
		public System.Nullable<double> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Brand", DbType="VarChar(MAX)")]
		public string Brand
		{
			get
			{
				return this._Brand;
			}
			set
			{
				if ((this._Brand != value))
				{
					this.OnBrandChanging(value);
					this.SendPropertyChanging();
					this._Brand = value;
					this.SendPropertyChanged("Brand");
					this.OnBrandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(MAX)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_ComputerPart", Storage="_ComputerParts", ThisKey="PartID", OtherKey="PartID")]
		public EntitySet<ComputerPart> ComputerParts
		{
			get
			{
				return this._ComputerParts;
			}
			set
			{
				this._ComputerParts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_OrderList", Storage="_OrderLists", ThisKey="PartID", OtherKey="CpuID")]
		public EntitySet<OrderList> OrderLists
		{
			get
			{
				return this._OrderLists;
			}
			set
			{
				this._OrderLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_OrderList1", Storage="_OrderLists1", ThisKey="PartID", OtherKey="DisplayID")]
		public EntitySet<OrderList> OrderLists1
		{
			get
			{
				return this._OrderLists1;
			}
			set
			{
				this._OrderLists1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_OrderList2", Storage="_OrderLists2", ThisKey="PartID", OtherKey="HdID")]
		public EntitySet<OrderList> OrderLists2
		{
			get
			{
				return this._OrderLists2;
			}
			set
			{
				this._OrderLists2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_OrderList3", Storage="_OrderLists3", ThisKey="PartID", OtherKey="OsID")]
		public EntitySet<OrderList> OrderLists3
		{
			get
			{
				return this._OrderLists3;
			}
			set
			{
				this._OrderLists3.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_OrderList4", Storage="_OrderLists4", ThisKey="PartID", OtherKey="RamID")]
		public EntitySet<OrderList> OrderLists4
		{
			get
			{
				return this._OrderLists4;
			}
			set
			{
				this._OrderLists4.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ComputerParts(ComputerPart entity)
		{
			this.SendPropertyChanging();
			entity.Part = this;
		}
		
		private void detach_ComputerParts(ComputerPart entity)
		{
			this.SendPropertyChanging();
			entity.Part = null;
		}
		
		private void attach_OrderLists(OrderList entity)
		{
			this.SendPropertyChanging();
			entity.Part = this;
		}
		
		private void detach_OrderLists(OrderList entity)
		{
			this.SendPropertyChanging();
			entity.Part = null;
		}
		
		private void attach_OrderLists1(OrderList entity)
		{
			this.SendPropertyChanging();
			entity.Part1 = this;
		}
		
		private void detach_OrderLists1(OrderList entity)
		{
			this.SendPropertyChanging();
			entity.Part1 = null;
		}
		
		private void attach_OrderLists2(OrderList entity)
		{
			this.SendPropertyChanging();
			entity.Part2 = this;
		}
		
		private void detach_OrderLists2(OrderList entity)
		{
			this.SendPropertyChanging();
			entity.Part2 = null;
		}
		
		private void attach_OrderLists3(OrderList entity)
		{
			this.SendPropertyChanging();
			entity.Part3 = this;
		}
		
		private void detach_OrderLists3(OrderList entity)
		{
			this.SendPropertyChanging();
			entity.Part3 = null;
		}
		
		private void attach_OrderLists4(OrderList entity)
		{
			this.SendPropertyChanging();
			entity.Part4 = this;
		}
		
		private void detach_OrderLists4(OrderList entity)
		{
			this.SendPropertyChanging();
			entity.Part4 = null;
		}
	}
}
#pragma warning restore 1591
